{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","input","setInput","handleSet","trim","length","cat","onSubmit","e","preventDefault","onClick","type","id","value","onChange","target","GifItem","title","url","className","slice","setTitle","src","alt","data","category","a","encodeURI","fetch","resp","json","getGif","datos","gifs","map","img","images","downsized_medium","GifGrid","loading","setData","useEffect","then","imgs","useFetchGif","key","GifExpertApp","splice","ReactDOM","render","document","getElementById"],"mappings":"qMAiDeA,EA9CK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,KAAjBC,WAERC,mBAAS,KAFgB,mBAE5CC,EAF4C,KAErCC,EAFqC,KAS7CC,EAAY,WACVF,EAAMG,OAAOC,OAAS,IACtBP,GAAc,SAACQ,GAAD,OAAUL,GAAV,mBAAoBK,OAClCJ,EAAS,MAcjB,OAAQ,oCAEJ,8CACA,0BAAMK,SAbW,SAACC,GAClBA,EAAEC,iBACFN,MAaI,4BAAQO,QAVQ,SAACF,GACrBA,EAAEC,iBACFN,MAQI,SACA,2BAAOQ,KAAK,OACRC,GAAG,SACHC,MAAOZ,EACPa,SA/BgB,SAACN,GACzBA,EAAEC,iBACFP,EAASM,EAAEO,OAAOF,aCYXG,EAnBC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAWtB,OACI,yBAAKC,UAAU,mDACX,4BAVS,SAACF,GACd,OAAGA,EAAMZ,QAAU,EACRY,EAEAA,EAAMG,MAAM,EAAG,GAAK,MAMrBC,CAASJ,IACf,yBAAKK,IAAMJ,EAAMK,IAAMN,M,uBChB7BO,EAAI,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACHR,EADG,iDAC8CS,UAAUF,GADxD,+DAEUG,MAAMV,GAFhB,cAEHW,EAFG,gBAGcA,EAAKC,OAHnB,uBAGDN,EAHC,EAGDA,KAHC,kBAIFA,GAJE,2CAAH,sDAOGO,EAAM,uCAAG,WAAMN,GAAN,iBAAAC,EAAA,sEAEEF,EAAKC,GAFP,cAEZO,EAFY,OAGZC,EAAOD,EAAME,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHvB,GAAIuB,EAAIvB,GACRK,MAAOkB,EAAIlB,MACXC,IAAG,UAAEiB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBnB,QAPxB,kBAWXe,GAXW,2CAAH,sDCsBJK,EAzBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDP,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAAe,EAGjBzB,mBAAS,CAC7BwB,KAAM,GACNe,SAAS,IAL4B,mBAGlCf,EAHkC,KAG5BgB,EAH4B,KAmBzC,OAXAC,qBAAU,WACNV,EAAON,GAAUiB,MAAK,SAAAC,GAElBH,EAAQ,CACJhB,KAAMmB,EACNJ,SAAS,SAIlB,CAACd,IAEGD,EDd2BoB,CAAY,CAACnB,aAAvCc,EAJsB,EAItBA,QAAeH,EAJO,EAIbZ,KACjB,OACI,oCACMe,GAAW,uBAAGpB,UAAU,oCAAb,eAEb,wBAAIA,UAAU,yCAAyCM,GACvD,yBAAKN,UAAU,aAEPiB,EAAOF,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIU,IAAMV,EAAIvB,IACLuB,UEUlBW,EAzBM,WAAO,IAAD,EAEa9C,mBAAS,IAFtB,mBAEhBD,EAFgB,KAEJD,EAFI,KAOvB,OAFAC,EAAWgD,OAAO,EAAE,GAGhB,oCACI,4CACA,6BACA,kBAAC,EAAD,CAAajD,cAAgBA,EAAgBC,WAAYA,IAEjDA,EAAWmC,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACIoB,IAAMpB,EACNA,SAAWA,S,YCdvCuB,IAASC,OAAQ,kBAAE,EAAF,MAAmBC,SAASC,eAAe,U","file":"static/js/main.ad9f54bc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories, categories }) => {\r\n\r\n    const [input, setInput] = useState('');\r\n\r\n    const handleInputOnChange = (e) => {\r\n        e.preventDefault();\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSet = () => {\r\n        if (input.trim().length > 2) {\r\n            setCategories((cat) => [input, ...cat]);\r\n            setInput('')\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleSet();\r\n    }\r\n\r\n    const handleAddButton = (e) => {\r\n        e.preventDefault();\r\n        handleSet();\r\n    }\r\n\r\n    return (<>\r\n\r\n        <h2 > Add Category </h2>\r\n        <form onSubmit={handleSubmit} >\r\n\r\n            <button onClick={handleAddButton} > Add </button>\r\n            <input type=\"text\"\r\n                id=\"txtAdd\"\r\n                value={input}\r\n                onChange={handleInputOnChange}\r\n            />\r\n        </form>\r\n    </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react'\r\n\r\nconst GifItem = ({ title, url }) => {\r\n\r\n\r\n    const setTitle = (title) => {\r\n        if(title.length <= 8){\r\n            return title\r\n        }else {\r\n            return title.slice(0, 9) + '...'; \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"img-items animate__animated animate__fadeInDown\">\r\n            <h3>{ setTitle(title) }</h3>\r\n            <img src={ url } alt={ title }></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifItem;\r\n","const data = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=xyERJcxqZL6ATJNcZf6CQaCgfiftV2ih`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    return data;\r\n}\r\n\r\nexport const getGif = async(category) => {\r\n    \r\n    const datos = await data(category);\r\n    const gifs = datos.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\nimport GifItem from './GifItem';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    // Desestructuracion al hook que devuelve el objeto de imagenes y un loading.\r\n    // Se le pasa la categoria indicada por inyeccion de dependencia.\r\n\r\n    const { loading, data: images } = useFetchGif({category});\r\n    return (\r\n        <>\r\n            { loading && <p className=\"animate__animated animate__flash\">Buscando...</p> }\r\n            \r\n            <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n            <div className=\"container\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifItem\r\n                            key={ img.id } \r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from 'react';\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = ({ category }) => {\r\n\r\n\r\n    const [data, setData] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGif(category).then(imgs => {\r\n\r\n            setData({\r\n                data: imgs,\r\n                loading: false,\r\n            })\r\n        });\r\n\r\n    }, [category])\r\n\r\n    return data;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([])\r\n\r\n    // Elimina el elemento anterior para que solamente se renderize la primer categor√≠a\r\n    categories.splice(1,1)\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={ setCategories } categories={categories}/>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid\r\n                            key={ category } \r\n                            category={ category }\r\n                         />\r\n                    ))\r\n                }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render( < GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}